// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_cart/test/blocs/cart_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_cart/database/cart_database.dart' as _i3;
import 'package:flutter_cart/models/product.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
    parent,
    parentInvocation,
  );
}

/// A class which mocks [CartDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartDatabase extends _i1.Mock implements _i3.CartDatabase {
  MockCartDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> addToCart(
    _i5.Product? product,
    int? quantity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [
            product,
            quantity,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<_i5.Product, int>> getCartItems() => (super.noSuchMethod(
        Invocation.method(
          #getCartItems,
          [],
        ),
        returnValue:
            _i4.Future<Map<_i5.Product, int>>.value(<_i5.Product, int>{}),
      ) as _i4.Future<Map<_i5.Product, int>>);

  @override
  _i4.Future<void> updateQuantity(
    int? id,
    int? quantity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateQuantity,
          [
            id,
            quantity,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeFromCart(int? id) => (super.noSuchMethod(
        Invocation.method(
          #removeFromCart,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearCart() => (super.noSuchMethod(
        Invocation.method(
          #clearCart,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
